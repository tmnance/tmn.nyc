// Generated by CoffeeScript 1.7.1

/*
  {
    poll
    name
    votes
    imageUrl
  }
 */

(function() {
  var Choice, Poll;

  Choice = (function() {
    function Choice(properties) {
      var handleEnd, handleMove, handleStart, setVotes;
      this.poll = properties.poll;
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = window.innerWidth;
      this.canvas.height = 100;
      this.canvas.setAttribute('style', 'width:100%;height:100px;background-color:#999999;');
      var section = document.createElement('section');
      properties.container.appendChild(section);
      var h2 = document.createElement('h2');
      section.appendChild(h2);
      section.appendChild(this.canvas);
      h2.innerHTML = properties.name;

      var img = document.createElement('img');
      img.src = properties.url;
      img.width = 250;
      section.appendChild(img);

      section.className = 'row'
      // properties.container.appendChild(this.canvas);
      this.fillX = 0;
      this.toX = 0;
      this.votes = 0;
      setVotes = (function(_this) {
        return function(e) {
          var notch, votes;
          notch = _this.canvas.width / _this.poll.choiceCount;
          votes = Math.ceil(e.changedTouches[0].clientX / notch);
          if (votes !== _this.votes) {
            _this.setVote(votes);
            if (_this.animating !== true) {
              _this.animateTo();
            }
          }
        };
      })(this);
      handleStart = (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.pressing = true;
          setVotes(e);
        };
      })(this);
      handleMove = (function(_this) {
        return function(e) {
          if (_this.pressing === true) {
            e.preventDefault();
            setVotes(e);
          }
        };
      })(this);
      handleEnd = (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.pressing = false;
        };
      })(this);
      this.canvas.addEventListener('touchstart', handleStart);
      this.canvas.addEventListener('touchmove', handleMove);
      this.canvas.addEventListener('touchend', handleEnd);
      this.canvas.addEventListener('touchcancel', handleEnd);
    }

    Choice.prototype.render = function() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.fillStyle = 'orange';
      this.ctx.fillRect(0, 0, this.fillX, this.canvas.height);
    };

    Choice.prototype.animateTo = function() {
      var update;
      this.animating = true;
      (update = (function(_this) {
        return function() {
          if (_this.fillX !== _this.toX) {
            requestAnimationFrame(update);
          } else {
            _this.animating = false;
          }
          if (_this.toX > _this.fillX) {
            _this.fillX += 20;
            if (_this.fillX > _this.toX) {
              _this.fillX = _this.toX;
            }
          } else if (_this.toX < _this.fillX) {
            _this.fillX -= 20;
            if (_this.fillX < _this.toX) {
              _this.fillX = _this.toX;
            }
          }
          _this.render();
        };
      })(this))();
    };

    Choice.prototype.setVote = function(votes) {
      this.votes = votes;
      this.poll.resetPoints();
      if (this.poll.pointsSpent > this.poll.choiceCount) {
        this.votes -= this.poll.pointsSpent - this.poll.choiceCount;
      }
      this.toX = this.votes / this.poll.choiceCount * this.canvas.width;
      if (this.animating !== true) {
        this.animateTo();
      }
    };

    Choice.prototype.fillStrict = function() {
      var choice, _i, _len, _ref;
      _ref = this.poll.choices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        if (this !== choice) {
          choice.setVote(0);
        }
      }
      this.setVote(this.poll.choiceCount);
    };

    return Choice;

  })();

  Poll = (function() {
    function Poll(properties) {
      var choice, _i, _len, _ref;
      this.container = properties.container;
      this.question = properties.question;
      this.choiceCount = properties.choices.length;
      this.pointsSpent = 0;
      this.choices = [];
      _ref = properties.choices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        choice.poll = this;
        choice.container = properties.container;
        this.choices.push(new Choice(choice));
      }
    }

    Poll.prototype.resetPoints = function() {
      var choice, points, _i, _len, _ref;
      points = 0;
      _ref = this.choices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        points += choice.votes;
      }
      this.pointsSpent = points;
    };

    Poll.prototype.addChoice = function(properties) {
      this.choiceCount++;
      return this.choices.push(new Choice(properties));
    };

    return Poll;

  })();

  window.KargoPoll = Poll;

}).call(this);
